@page "/ML"
@using UptimeR.ML.Trainer.Interfaces
@using Uptimer.ML.Reader
@inject IAnomalyDetector anomalyDetector
@inject IReader Reader


<h1>Machine Learning</h1>
<AuthorizeView Policy="Admin">
    <Authorizing>
        <h1>Loading...</h1>
    </Authorizing>
    <Authorized>

        <p class="alert-info">@errorMessage</p>

        <button class="btn btn-primary" @onclick="Train">Train ALL logs</button>

        <br><br>

        <button class="btn btn-primary" @onclick="Train24">Train logs for 24 hours</button>
        <br><br>

        <!--datepicker her omkring ca...-->

        <div>
            <input type="date" id="datepicker" @bind-value="date" class="form-control-sm" />
            <button class="btn btn-primary" @onclick="(() => GetAnomalies(date))">Indlæs logs</button>
        </div>


        <p>Anomalies Detected on @anomalies.Date</p>
        <table class="succes-table">
            <thead>
                <tr>
                    <th>
                        <p>Service Name</p>
                    </th>
                    <th>
                        <p>Anomalies</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in anomalies.Anomalies)
                {
                    <tr>
                        <td class="succes-td-servicename">
                            <p>@a.Servicename</p>
                        </td>
                        <td>
                            <p>@a.AnomalyCount</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    </Authorized>
    <NotAuthorized>
        <div>
            <h1 style="text-align: center; Font-size:108px" title="Du ved vi har styr på det">Tro på det <br />
                Christina</h1>
        </div>

    </NotAuthorized>
</AuthorizeView>

@code
{
    private ServiceAnomalies anomalies = new();
    string errorMessage = "";
    DateOnly date = DateOnly.FromDateTime(DateTime.Now).AddDays(-1);

    private void Train()
    {
        try
        {
            anomalyDetector.Detect();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void Train24()
    {
        try
        {
            anomalyDetector.Detect24Hours(date);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAnomalies(date);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetAnomalies(DateOnly date)
    {
        anomalies = await Reader.GetAnomaliesForDate(date);
    }
}