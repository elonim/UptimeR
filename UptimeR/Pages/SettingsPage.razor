@page "/SettingsPage"
@using Mapster
@using UptimeR.Application.Commands.URLRequests
@using UptimeR.Application.Commands.LogHistoryReqursts
@using UptimeR.Application.Interfaces
@using UptimeR.Validation
@inject IURLUseCases URLUseCases
@inject ILogHistoryUseCases LogHistoryUseCases

<h1>Settings</h1>

<br />
<div class="seventy-div">
    <div>
        <table class="settings-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>URL</th>
                    <th>Only ping</th>
                    <th>Interval</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in uRLs)
                {
                    <tr @key="@item">
                        <td class="settings-td-servicename"><input class="form-control" @bind="item.ServiceName" /></td>
                        <td class="settings-td-URL"><input class="form-control" @bind="item.Url" /></td>
                        <td class="settings-td-onlyping"><input type="checkbox" @bind="item.OnlyPing" /></td>
                        <td class="settings-td-Interval"><input class="form-control" @bind="item.Interval" /></td>
                        <td class="settings-td-button"><button class="btn btn-primary"
                            @onclick="(() => Update(item))">Update</button></td>
                        <td class="settings-td-button"><button class="btn btn-primary"
                            @onclick="(() => Delete(item))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    <div>
        <div>
            <p>Add New Item</p>
        </div>
        <table class="settings-table">
            <thead>
                <tr>
                    <th>Service Name</th>
                    <th>URL</th>
                    <th>Only ping</th>
                    <th>Interval</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="settings-td-servicename"><input class="form-control" @bind="newUrl.ServiceName" /></td>
                    <td class="settings-td-URL"><input class="form-control" @bind="newUrl.Url" /></td>
                    <td class="settings-td-onlyping"><input type="checkbox" @bind="newUrl.OnlyPing" /></td>
                    <td class="settings-td-Interval"><input class="form-control" @bind="newUrl.Interval" /></td>
                    <td class="settings-td-button"><button class="btn btn-primary" @onclick="AddNewUrl"> Add</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <br />
    <br />


    <p class="alert-info">@errorMessage</p>
    <br />
    <p>Number of logs in Database @logs.LogHistoryCount</p>
</div>

@code
{
    string errorMessage = "";
    List<ReadAllURLSSettings> uRLs = new();
    CreateURLRequest newUrl = new();
    LogItems logs = new();

    private async Task AddNewUrl()
    {
        if (await UrlValid(newUrl))
        {
            try
            {
                await URLUseCases.AddURL(newUrl);
                await GetUrlsFromDb();
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
            newUrl = new();
        }
    }

    private async Task<bool> UrlValid(CreateURLRequest url)
    {
        var vali = new URLValidator();
        var result = await vali.ValidateAsync(url);
        if (!result.IsValid)
        {
            errorMessage = result.Errors.First().ErrorMessage;
            return false;
        }
        return true;
    }

    private async Task Update(ReadAllURLSSettings url)
    {
        if (await UrlValid(url.Adapt<CreateURLRequest>()))
        {
            try
            {
                URLUseCases.UpdateURL(url.Adapt<UpdateURLRequest>());
                await GetUrlsFromDb();
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
        }
    }

    private async Task Delete(ReadAllURLSSettings url)
    {
        try
        {
            URLUseCases.DeleteURL(url.Adapt<DeleteURLRequest>());
            await GetUrlsFromDb();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUrlsFromDb();
        await GetLogCount();
    }

    private async Task GetUrlsFromDb()
    {
        try
        {
            errorMessage = "";
            uRLs = await URLUseCases.GetAllUrlsAsync();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task GetLogCount()
    {
        try
        {
            logs = await LogHistoryUseCases.CountLogs();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}